@mixin button {
  @include button-tokens;
  @include button-base;
  @include button-block;
  @include button-circle;
  @include button-sizes;
  @include button-emphasis;
  @include button-colors;
  @include button-states;
}

@mixin button-tokens {
  --button-background: transparent;
  --button-border: transparent;
  --button-color: var(--color-primary-default);
  --button-radius: 100em;
  --button-font-size: var(--font-size-scale-up-01);
  --button-font-weight: var(--font-weight-semi-bold);
  --button-xsmall: 24px;
  --button-small: 32px;
  --button-medium: 40px;
  --button-large: 48px;
  --button-size: var(--button-medium);
  --button-padding: 0 var(--spacing-scale-3x);
}

@mixin button-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  background-color: var(--button-background);
  border: 1px solid var(--button-border);
  border-radius: var(--button-radius);
  color: var(--button-color);
  cursor: pointer;
  font-size: var(--button-font-size);
  font-weight: var(--button-font-weight);
  height: var(--button-size);
  padding: var(--button-padding);
  text-align: center;
  vertical-align: middle;
  white-space: nowrap;
  width: auto;
}

@mixin button-block {
  &.block {
    width: 100%;
  }
  @each $breakpoint in "sm", "md", "lg", "xl" {
    @include media-breakpoint-up(#{$breakpoint}) {
      &.block-#{$breakpoint} {
        width: 100%;
      }
      &.auto-#{$breakpoint} {
        width: auto;
      }
    }
  }
}

@mixin button-circle {
  &.circle,
  &[circle],
  &.is-circle {
    border-radius: 50%;
    padding: 0;
    width: var(--button-size);
  }
}

@mixin button-sizes {
  @each $size in "xsmall", "small", "medium", "large" {
    &.#{$size},
    &[#{$size}],
    &.is-#{$size} {
      --button-size: var(--button-#{$size});
    }
  }
}

@mixin button-emphasis {
  &.primary,
  &[primary],
  &.is-primary {
    --button-background: var(--status-enabled-text);
    --button-color: var(--color-secondary-01);
    &.inverted,
    &.is-inverted,
    &[inverted] {
      --button-background: var(--color-secondary-01);
      --button-color: var(--status-enabled-text);
    }
  }
  &.secondary,
  &[secondary],
  &.is-secondary {
    --button-background: var(--color-secondary-01);
    --button-border: var(--status-enabled-text);
    &.inverted,
    &.is-inverted,
    &[inverted] {
      --button-background: var(--status-enabled-text);
      --button-border: var(--color-secondary-01);
      --button-color: var(--color-secondary-01);
    }
  }
  &.inverted,
  &.is-inverted,
  &[inverted] {
    --button-color: var(--color-secondary-01);
  }
}

@mixin button-colors {
  @each $color in "danger", "success", "warning", "info" {
    &.#{$color},
    &[#{$color}],
    &.is-#{$color} {
      --button-background: var(--color-#{$color});
      @if $color != "warning" {
        --button-color: var(--color-secondary-01);
      }
    }
  }
}

@mixin button-states {
  &:disabled {
    cursor: not-allowed;
    opacity: 0.5;
  }
  &:not(:disabled):not(.loading) {
    &:focus {
      --button-background: var(--color-secondary-01);
      --button-color: var(--color-primary-default);
      background-image: linear-gradient(
        rgba(var(--rgb-support-02), 0.3),
        rgba(var(--rgb-support-02), 0.3)
      );
    }
    &:hover {
      --button-background: var(--status-hover-background);
      --button-color: var(--color-primary-default);
      background-image: none;
    }
    &:active {
      --button-background: var(--status-pressed-background);
      --button-color: var(--status-pressed-text);
    }
  }
  &.active,
  &.is-active,
  &[active] {
    --button-background: var(--status-activated-background);
    --button-color: var(--status-activated-text);
  }
  &.loading,
  &[loading],
  &.is-loading {
    &::after {
      border-style: solid;
      border-color: var(--button-color) var(--button-color) transparent;
    }
    &.primary,
    &.danger,
    &.success,
    &.info {
      &::after {
        border-color: var(--button-color) var(--button-color) transparent;
      }
    }
  }
}
